/**
 * Reflective thrift IDL description.
 *
 * Comments are gathered before the start of the next statement.
 *
 * - Line comments are accumulated with newline delimiter.
 *   Each line is individually trimmed.
 * - Block comments replace the entire comment.
 *   The first space after '*' on each line is ignored.
 */
namespace java net.morimekta.providence.model
namespace js morimekta.providence.model

/**
 * Base declaration type. All declarations have these fields.
 */
interface Decl {
    /**
     * Documentation for the specific declaration.
     */
    optional string documentation;
    /**
     * Name of the type, constant or service.
     */
    required string name;
}

/**
 * <name> (= <value>)
 */
struct EnumValue implements Decl {
    1: optional string documentation;
    2: required string name;
    3: optional i32    id;
    4: optional map<string,string> annotations (container = "SORTED");
}

/**
 * enum {
 *   (<value> ([;,])?)*
 * }
 */
struct EnumType implements Decl {
    1: optional string documentation;
    2: required string name;
    3:          list<EnumValue> values;
    4: optional map<string,string> annotations (container = "SORTED");
}

/**
 * typedef <type> <name>
 */
struct TypedefType implements Decl {
    1: optional string documentation;
    2: required string type;
    3: required string name;
}

/**
 * Struct variant for StructType. The lower-case of the enum value is the
 * thrift keyword.
 *
 * STRUCT:    Normal Structure.
 * UNION:     Only one field set to be valid.
 * EXCEPTION: Handled as exception (Java, Python etc.).
 *
 * Providence Only:
 *
 * INTERFACE: Not a real type. Only interface. Struct can 'implement' this
 *            And will then require to have matching fields. Field ids not
 *            allowed.
 */
enum MessageVariant {
    STRUCT = 1,
    UNION = 2,
    EXCEPTION = 3,
    INTERFACE = 4,
}

/**
 * The requirement of the field.
 */
enum FieldRequirement {
    /**
     * Will be serialized, will be made present from builder,
     * but not required for validity.
     */
    DEFAULT  = 0,
    /** Presence is optional. */
    OPTIONAL = 1,
    /** Must be set for message to be 'valid'. */
    REQUIRED = 2,
}

/**
 * For fields:
 *   (<key>:)? (required|optional)? <type> <name> (= <default_value>)?
 * For const:
 *   const <type> <name> = <default_value>
 *
 * Fields without key is assigned values ranging from 65335 and down (2^16-1)
 * in order of appearance. Because of the "in order of appearance" the field
 * *must* be filled by the IDL parser.
 *
 * Consts are always given the key '0'.
 */
struct FieldType implements Decl {
    1: optional string documentation;
    2: required i32    id;
    3: optional FieldRequirement requirement = FieldRequirement.DEFAULT;
    4: required string type;
    5: required string name;
    6: optional string default_value;
    7: optional map<string,string> annotations = {} (container = "SORTED");
}

/**
 * <variant> {
 *   (<field> ([,;])?)*
 * }
 */
struct MessageType implements Decl {
    1: optional string documentation;
    2: optional MessageVariant variant = MessageVariant.STRUCT;
    3: required string name;
    4:          list<FieldType> fields;
    5: optional map<string,string> annotations = {} (container = "SORTED");
    /** Interface this message is implementing. */
    6: optional string implementing;
}

/**
 * (oneway)? <return_type> <name>'('<param>*')' (throws '(' <exception>+ ')')?
 */
struct FunctionType implements Decl {
    1: optional string documentation;
    2: optional bool one_way = false;
    3: optional string return_type
    4: required string name;
    5:          list<FieldType> params = [];
    6: optional list<FieldType> exceptions = [];
    7: optional map<string,string> annotations = {} (container = "SORTED");
}

/**
 * service (extends <extend>)? {
 *   (<method> [;,]?)*
 * }
 */
struct ServiceType implements Decl {
    1: optional string documentation;
    2: required string name;
    3: optional string extend;
    4:          list<FunctionType> methods = [];
    5: optional map<string,string> annotations = {} (container = "SORTED");
}

/**
 * const <type> <name> = <value>
 */
struct ConstType implements Decl {
    1: optional string documentation;
    4: required string type;
    5: required string name;
    6: required string value;
    7: optional map<string,string> annotations = {} (container = "SORTED");
}

/**
 * ( <enum> | <typedef> | <struct> | <service> | <const> )
 */
union Declaration of Decl {
    1: EnumType    decl_enum;
    2: TypedefType decl_typedef;
    3: MessageType decl_message;
    4: ServiceType decl_service;
    5: ConstType   decl_const;
}

/**
 * <namespace>* <include>* <declataion>*
 */
struct ProgramType {
    /**
     * Program documentation must come before the first statement of the header.
     */
    1: optional string documentation;

    /**
     * The program name, deducted from the .thrift IDL file name.
     */
    2: required string program_name;

    /**
     * List of included thrift files. Same as from the actual thrift file.
     *
     * include "<program>.thrift"
     */
    3: optional map<string,string> includes = {};

    /**
     * Map of language to laguage dependent namespace identifier.
     *
     * namespace <key> <value>
     */
    4: optional map<string,string> namespaces = {} (container = "SORTED");

    /**
     * List of declarations in the program file. Same order as in the thrift file.
     */
    5: optional list<Declaration> decl = [];
}

/**
 * A meta object describing a parsed program file. This may include the
 * included programs as their own meta file. The lines of the original
 * program .thrift file is also included.
 */
struct ProgramMeta {
    /** Full absolute path to the file. */
    1: optional string file_path;
    /** The lines of the program file */
    2: optional list<string> file_lines;
    /** The program type definition */
    3: optional ProgramType program;
    /** Map of program name to meta of included programs */
    4: optional map<string, ProgramMeta> includes;
}
